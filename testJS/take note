// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;



contract testTransfer {
    
    
    address usdt;
    
    constructor(address _usdt) public {
        usdt = _usdt;
    }
    
    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));

    function _safeTransfer(address token, address to, uint value) private {
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'UniswapV2: TRANSFER_FAILED');
    }

    function transferUSDT(address to, uint value) public {
        _safeTransfer(usdt, to, value);
    }
    
    bytes4 private constant SELECTOR2 = bytes4(keccak256(bytes('balanceOf(address)')));
    
    function safeBalanceOf(address token, address user) public returns (bytes memory) {
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR2, user));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TRANSFER_FAILED');
        return data;
    }
    
}